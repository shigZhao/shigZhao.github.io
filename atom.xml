<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shigZhao&#39;s·Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shigZhao.me/"/>
  <updated>2017-03-03T01:11:12.259Z</updated>
  <id>http://www.shigZhao.me/</id>
  
  <author>
    <name>shigZhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java类的基本构成</title>
    <link href="http://www.shigZhao.me/2017/03/01/JavaCode/"/>
    <id>http://www.shigZhao.me/2017/03/01/JavaCode/</id>
    <published>2017-03-01T07:30:41.000Z</published>
    <updated>2017-03-03T01:11:12.259Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>Java类的基本组成：包、引入、类、变量、方法、注释。如下面案例：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package javacode;		            //包</div><div class="line"></div><div class="line">import java.util.*;              //引入类</div><div class="line">/**</div><div class="line">*	@author shigzhao           //注释</div><div class="line">*/</div><div class="line">public class HelloWorld&#123;    //定义HelloWorld类</div><div class="line">	private String world = &quot;World&quot;;     //变量</div><div class="line">	</div><div class="line">	public void say()&#123;   //方法</div><div class="line">		System.out.println(&quot;Hello&quot;+world+&quot;!&quot;);    //输出语句</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String args[])&#123;		//执行方法入口</div><div class="line">		HelloWorld  hello = new HelloWorld();</div><div class="line">		</div><div class="line">		hello.say();	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>下面详细进行讲解Java的基本组成。</p>
<h2 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h2><p>因为Java编译器为每个类生成一个字节码文件，且文件名与类名相同，为了防止类名冲突，通过包进行类名管理。</p>
<h3 id="包的使用语法"><a href="#包的使用语法" class="headerlink" title="包的使用语法"></a>包的使用语法</h3><p>包由关键字package来定义。在类的第一行且无空格，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">package  包名；</div></pre></td></tr></table></figure></p>
<h3 id="包的命名规则"><a href="#包的命名规则" class="headerlink" title="包的命名规则"></a>包的命名规则</h3><p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br><strong>正例</strong>： 应用工具类包名为 com.alibaba.mpp.util、类名为MessageUtils （此规则参考 spring的框架结构）</p>
<h2 id="引入（import）"><a href="#引入（import）" class="headerlink" title="引入（import）"></a>引入（import）</h2><p>在Java中，import是用来通知Java编译器的，在这个程序中正在使用当前类外部的其他类。</p>
<h3 id="import的使用语法"><a href="#import的使用语法" class="headerlink" title="import的使用语法"></a>import的使用语法</h3><p>import位于package的语句后面，必须在类文件的开头。要引入一个类，必须写完整的包名和类名。其语法格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import java.util.List;</div></pre></td></tr></table></figure></p>
<h3 id="import的引入原则"><a href="#import的引入原则" class="headerlink" title="import的引入原则"></a>import的引入原则</h3><p>在源程序中用到了除java.lang包以外的类，无论是系统的类还是自己定义的包中的类，都必须用import语句标识，以通知编译器在编译时找到相应的类文件。</p>
<h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>Java程序的基本单位是类，类的实例是对象。</p>
<h3 id="类的命名规则"><a href="#类的命名规则" class="headerlink" title="类的命名规则"></a>类的命名规则</h3><p><strong>以下内容出处：《阿里巴巴 JAVA 开发规范手册》</strong><br>类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：（领域模型<br>的相关命名） DO / DTO / VO / DAO 等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</div><div class="line">反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</div></pre></td></tr></table></figure></p>
<p>抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命<br>名以它要测试的类的名称开始，以 Test 结尾。<br>POJO 类中的任何布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错<br>误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">反例： 定义为基本数据类型 boolean isSuccess；的属性，它的方法也是 isSuccess()， RPC</div><div class="line">框架在反向解析的时候， “ 以为” 对应的属性名称是 success，导致属性获取不到，进而抛出</div><div class="line">异常。</div></pre></td></tr></table></figure></p>
<p>如果使用到了设计模式，建议在类名中体现出具体模式。<br>说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">正例： public class OrderFactory;</div><div class="line">public class LoginProxy;</div><div class="line">public class ResourceObserver;</div></pre></td></tr></table></figure></p>
<p>接口类中的方法和属性不要加任何修饰符号（ public 也不要加），保持代码的简洁<br>性，并加上有效的 javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>与接口方法相关，并且是整个应用的基础常量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">正例： 接口方法签名： void f();</div></pre></td></tr></table></figure></p>
<p>接口基础常量表示： String COMPANY = “alibaba”;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">反例： 接口方法定义： public abstract void f();</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong>： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默<br>认实现。<br>枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br><strong>说明</strong>： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">正例： 枚举名字： DealStatusEnum；成员名称： SUCCESS / UNKOWN_REASON。</div></pre></td></tr></table></figure></p>
<h2 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h2><p>一个类中通常包含数据与函数两种类型的元素，根据变量的不同作用范围，可以将变量分为成员变量和局部变量。</p>
<h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p> 变量名可以由字母字符、数字、标点组成。<br> 变量名必须以字符字母、“$”、下划线开头。<br> 变量名不能与Java语言的保留字重名。</p>
<h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><p>变量赋值的两种方法：简单赋值和定义赋值</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法是Java的灵魂，他包括2部分：声明和方法体</p>
<h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p>一个方法包括声明部分和方法体部分。</p>
<h4 id="方法声明格式"><a href="#方法声明格式" class="headerlink" title="方法声明格式"></a>方法声明格式</h4><p>访问说明符  [修饰符] 返回值类型 方法名 ([参数列表])，其中”[]”括起来的部分是可选的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void say()&#123;</div><div class="line">	System.out.println(&quot;Hello&quot;+world+&quot;!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="方法的3种类型"><a href="#方法的3种类型" class="headerlink" title="方法的3种类型"></a>方法的3种类型</h3><p>根据方法的工作性质，分为以下三类：<br>1、“转换”型：修改内部变量的值。<br>2、”访问型”：将返回内部变量的值。<br>3、“效果型”：通常不返回任何值，而是指向某个动作，如控制台打印信息。</p>
<h3 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h3><p>计算机语言有2种向子程序传递参数的方法。</p>
<h4 id="值调用"><a href="#值调用" class="headerlink" title="值调用"></a>值调用</h4><p>将参数的值复制到子程序的形式参数中，所以子程序参数的变化并不会影响到用于调用的参数。</p>
<h4 id="引用调用"><a href="#引用调用" class="headerlink" title="引用调用"></a>引用调用</h4><p>将一个参数的引用传递给形式参数。在子程序中这个引用用于对调用中指定的实际参数进行访问，意味着形式参数的变化会影响到用于调用子程序的参数。<br>Java根据传递的内容使用2种方法。在Java中，当向方法传递一个基本数据类型时，传递的是一个值，当传递的是一个对象时，则按引用传递。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释有三种：<br>单行注释 “//”<br>多行注释  “/ <em>多行注释</em>/”<br>文档注释： “/<em> </em>/”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h2 id=&quot;intro&quot;&gt;前言&lt;/h2&gt;Java类的基本组成：包、引入、类、变量、方法、注释。如下面案例：&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.shigZhao.me/tags/java/"/>
    
      <category term="code" scheme="http://www.shigZhao.me/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Java编程基础·系列</title>
    <link href="http://www.shigZhao.me/2017/01/23/Java-Code-Principles/"/>
    <id>http://www.shigZhao.me/2017/01/23/Java-Code-Principles/</id>
    <published>2017-01-23T06:28:55.420Z</published>
    <updated>2017-03-02T15:46:18.577Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>该篇为目录，本系列共有6个部分，逐渐深入到Java的各种技术。包括Java语法基础知识、核心编程、图形编程、网络编程、高级特性。具体内容如下：<br><a id="more"></a><p></p>
<h2 id="第一部分-Java开发入门"><a href="#第一部分-Java开发入门" class="headerlink" title="第一部分 Java开发入门"></a>第一部分 Java开发入门</h2><h3 id="第一课-Java快速上手"><a href="#第一课-Java快速上手" class="headerlink" title="第一课 Java快速上手"></a>第一课 Java快速上手</h3><h3 id="第二课-JVM内存结构与其调优"><a href="#第二课-JVM内存结构与其调优" class="headerlink" title="第二课 JVM内存结构与其调优"></a>第二课 JVM内存结构与其调优</h3><h3 id="第三课-在Eclipse下开发Java程序"><a href="#第三课-在Eclipse下开发Java程序" class="headerlink" title="第三课 在Eclipse下开发Java程序"></a>第三课 在Eclipse下开发Java程序</h3><h3 id="第四课-在Linux下开发Java程序"><a href="#第四课-在Linux下开发Java程序" class="headerlink" title="第四课 在Linux下开发Java程序"></a>第四课 在Linux下开发Java程序</h3><h2 id="第二部分-Java语法基础"><a href="#第二部分-Java语法基础" class="headerlink" title="第二部分 Java语法基础"></a>第二部分 Java语法基础</h2><h3 id="第五课-Java核心语法详解"><a href="#第五课-Java核心语法详解" class="headerlink" title="第五课 Java核心语法详解"></a>第五课 Java核心语法详解</h3><h3 id="第六课-Java面向对象编程"><a href="#第六课-Java面向对象编程" class="headerlink" title="第六课 Java面向对象编程"></a>第六课 Java面向对象编程</h3><h3 id="第七课-Java面向对象编程扩展"><a href="#第七课-Java面向对象编程扩展" class="headerlink" title="第七课 Java面向对象编程扩展"></a>第七课 Java面向对象编程扩展</h3><h3 id="第八课-Java编码规范与样式"><a href="#第八课-Java编码规范与样式" class="headerlink" title="第八课 Java编码规范与样式"></a>第八课 Java编码规范与样式</h3><h2 id="第三部分-Java核心编程"><a href="#第三部分-Java核心编程" class="headerlink" title="第三部分 Java核心编程"></a>第三部分 Java核心编程</h2><h3 id="第九课-Java输入-输出流"><a href="#第九课-Java输入-输出流" class="headerlink" title="第九课 Java输入/输出流"></a>第九课 Java输入/输出流</h3><h3 id="第十课-Java多线程编程"><a href="#第十课-Java多线程编程" class="headerlink" title="第十课 Java多线程编程"></a>第十课 Java多线程编程</h3><h3 id="第十一课-Java常用实体类"><a href="#第十一课-Java常用实体类" class="headerlink" title="第十一课 Java常用实体类"></a>第十一课 Java常用实体类</h3><h3 id="第十二课-Java常用集合类"><a href="#第十二课-Java常用集合类" class="headerlink" title="第十二课 Java常用集合类"></a>第十二课 Java常用集合类</h3><h3 id="第十三课-Java正则表达式"><a href="#第十三课-Java正则表达式" class="headerlink" title="第十三课 Java正则表达式"></a>第十三课 Java正则表达式</h3><h3 id="第十四课-XML与属性文件"><a href="#第十四课-XML与属性文件" class="headerlink" title="第十四课 XML与属性文件"></a>第十四课 XML与属性文件</h3><h2 id="第四部分-Java图形编程"><a href="#第四部分-Java图形编程" class="headerlink" title="第四部分 Java图形编程"></a>第四部分 Java图形编程</h2><h3 id="第十五课-Java-GUI库对比"><a href="#第十五课-Java-GUI库对比" class="headerlink" title="第十五课 Java GUI库对比"></a>第十五课 Java GUI库对比</h3><h3 id="第十六课-AWT图形界面开发"><a href="#第十六课-AWT图形界面开发" class="headerlink" title="第十六课 AWT图形界面开发"></a>第十六课 AWT图形界面开发</h3><h3 id="第十七课-AWT多媒体编程"><a href="#第十七课-AWT多媒体编程" class="headerlink" title="第十七课 AWT多媒体编程"></a>第十七课 AWT多媒体编程</h3><h3 id="第十八课-Swing图形界面开发"><a href="#第十八课-Swing图形界面开发" class="headerlink" title="第十八课 Swing图形界面开发"></a>第十八课 Swing图形界面开发</h3><h3 id="第十九课-SWT图形界面开发"><a href="#第十九课-SWT图形界面开发" class="headerlink" title="第十九课 SWT图形界面开发"></a>第十九课 SWT图形界面开发</h3><h3 id="第二十课-SWT增强组件库JFace"><a href="#第二十课-SWT增强组件库JFace" class="headerlink" title="第二十课 SWT增强组件库JFace"></a>第二十课 SWT增强组件库JFace</h3><h3 id="第二十一课-Applet组件编程"><a href="#第二十一课-Applet组件编程" class="headerlink" title="第二十一课 Applet组件编程"></a>第二十一课 Applet组件编程</h3><h2 id="第五部分-Java网络编程"><a href="#第五部分-Java网络编程" class="headerlink" title="第五部分 Java网络编程"></a>第五部分 Java网络编程</h2><h3 id="第二十二课-Java网络编程"><a href="#第二十二课-Java网络编程" class="headerlink" title="第二十二课 Java网络编程"></a>第二十二课 Java网络编程</h3><h3 id="第二十三课-NIO非阻塞编程"><a href="#第二十三课-NIO非阻塞编程" class="headerlink" title="第二十三课 NIO非阻塞编程"></a>第二十三课 NIO非阻塞编程</h3><h3 id="第二十四课-RMI分布式网络编程"><a href="#第二十四课-RMI分布式网络编程" class="headerlink" title="第二十四课 RMI分布式网络编程"></a>第二十四课 RMI分布式网络编程</h3><h3 id="第二十五课-CORBA分布式网络编程"><a href="#第二十五课-CORBA分布式网络编程" class="headerlink" title="第二十五课 CORBA分布式网络编程"></a>第二十五课 CORBA分布式网络编程</h3><h2 id="第六部分-Java高级特性"><a href="#第六部分-Java高级特性" class="headerlink" title="第六部分 Java高级特性"></a>第六部分 Java高级特性</h2><h3 id="第二十六课-Java反射编程与动态代理"><a href="#第二十六课-Java反射编程与动态代理" class="headerlink" title="第二十六课 Java反射编程与动态代理"></a>第二十六课 Java反射编程与动态代理</h3><h3 id="第二十七课-Java泛型编程"><a href="#第二十七课-Java泛型编程" class="headerlink" title="第二十七课 Java泛型编程"></a>第二十七课 Java泛型编程</h3><h3 id="第二十八课-Java注释符编程"><a href="#第二十八课-Java注释符编程" class="headerlink" title="第二十八课 Java注释符编程"></a>第二十八课 Java注释符编程</h3><h3 id="第二十九课-Java-5-0语言新特性"><a href="#第二十九课-Java-5-0语言新特性" class="headerlink" title="第二十九课 Java 5.0语言新特性"></a>第二十九课 Java 5.0语言新特性</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h2 id=&quot;intro&quot;&gt;前言&lt;/h2&gt;该篇为目录，本系列共有6个部分，逐渐深入到Java的各种技术。包括Java语法基础知识、核心编程、图形编程、网络编程、高级特性。具体内容如下：&lt;br&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.shigZhao.me/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.shigZhao.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>windows下使用批处理脚本实现Jdk版本的切换</title>
    <link href="http://www.shigZhao.me/2017/01/20/windows-jdk-bat/"/>
    <id>http://www.shigZhao.me/2017/01/20/windows-jdk-bat/</id>
    <published>2017-01-19T16:16:15.000Z</published>
    <updated>2017-02-16T09:52:00.253Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>我们平时在window上做开发的时候，可能需要同时开发两个甚至多个项目，有时不同的项目对JDK的版本要求有区别，这时候我们可能会在一台电脑上安装多个版本的JDK。可环境变量又需要进行修改切换JDK版本，所以在网上找了找可以通过批处理脚本进行环境变量的自由切换。<br><a id="more"></a><p></p>
<h2 id="JDK路径及环境变量"><a href="#JDK路径及环境变量" class="headerlink" title="JDK路径及环境变量"></a>JDK路径及环境变量</h2><p>具体内容见下图：</p>
<h3 id="JDK路径"><a href="#JDK路径" class="headerlink" title="JDK路径"></a>JDK路径</h3><p>下图为我的jdk路径：</p>
<p><img src="http://ojm1qq2tg.bkt.clouddn.com/jdklujing.jpg" alt="jdk路径"></p>
<h3 id="JDK环境变量"><a href="#JDK环境变量" class="headerlink" title="JDK环境变量"></a>JDK环境变量</h3><p>下图为我电脑的环境变量：</p>
<p><img src="http://ojm1qq2tg.bkt.clouddn.com/jdkhuangjingbianliang.jpg" alt="JDK环境变量"></p>
<p>因为path内容太多，只好截取jdk的path路径: <strong>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</strong><br>脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line"></div><div class="line">rem --- Base Config 配置JDK的安装目录 ---</div><div class="line">:init </div><div class="line">set JAVA_HOME_1_8=D:\shigZhao\Java\jdk1.8.0_92</div><div class="line">set JAVA_HOME_1_6=D:\shigZhao\Java\jdk1.6.0_45</div><div class="line">:start </div><div class="line">echo 当前使用的JDK 版本: </div><div class="line">java -version </div><div class="line">echo. </div><div class="line">echo ============================================= </div><div class="line">echo jdk版本列表 </div><div class="line">echo 1.8 </div><div class="line">echo 1.7</div><div class="line">echo 1.6 </div><div class="line">echo ============================================= </div><div class="line"></div><div class="line">:select</div><div class="line">set /p opt=请选择jdk版本： </div><div class="line">if %opt%==1.8 (</div><div class="line">    set TARGET_JAVA_HOME=%JAVA_HOME_1_8%</div><div class="line">)</div><div class="line">if %opt%==1.7 (</div><div class="line">    set TARGET_JAVA_HOME=%JAVA_HOME_1_7%</div><div class="line">)</div><div class="line">if %opt%==1.6 (</div><div class="line">    set TARGET_JAVA_HOME=%JAVA_HOME_1_6%</div><div class="line">)</div><div class="line"></div><div class="line">echo 当前选择的Java路径:%TARGET_JAVA_HOME%</div><div class="line"></div><div class="line">wmic ENVIRONMENT where &quot;name=&apos;JAVA_HOME&apos;&quot; delete</div><div class="line">wmic ENVIRONMENT create name=&quot;JAVA_HOME&quot;,username=&quot;&lt;system&gt;&quot;,VariableValue=&quot;%TARGET_JAVA_HOME%&quot;</div><div class="line"></div><div class="line">rem -- refresh env ---</div><div class="line">call RefreshEnv</div><div class="line">echo ============================================= </div><div class="line">echo 运行RefreshEnv.exe</div><div class="line">@echo off &amp; setlocal enableextensions  </div><div class="line">echo WScript.Sleep 1000 &gt; %temp%/tmp$$$.vbs  </div><div class="line">set /a i = 5   </div><div class="line">:Timeout  </div><div class="line">if %i% == 0 goto Next  </div><div class="line">setlocal  </div><div class="line">set /a i = %i% - 1   </div><div class="line">echo # [%i%]秒后程序开始运行 #  </div><div class="line">cscript //nologo %temp%/tmp$$$.vbs  </div><div class="line">goto Timeout  </div><div class="line">goto End  </div><div class="line">:Next  </div><div class="line">echo.  </div><div class="line">  </div><div class="line">start RefreshEnv.exe</div><div class="line"></div><div class="line">echo ============================================= </div><div class="line">echo 修改后的JDK 版本: </div><div class="line">java -version </div><div class="line">echo. </div><div class="line">echo 请按任意键退出!   </div><div class="line">pause&gt;nul</div><div class="line"></div><div class="line">@echo on</div></pre></td></tr></table></figure></p>
<p>我们只需要修改jdk版本的路径就可以动态的切换JAVA_HOME的环境变量。然后运行RefreshEnv.exe来刷新环境变量的值。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>将上述的批处理脚本代码保存为.bat文件，并将RefreshEnv.exe辅助软件和.bat脚本文件放到同一个目录下,如下图所示:</p>
<p><img src="http://ojm1qq2tg.bkt.clouddn.com/switch.jpg" alt="refreshEnv及脚本"></p>
<p>双击.bat文件运行批处理脚本，根据提示操作即可,如下图所示:</p>
<p><img src="http://ojm1qq2tg.bkt.clouddn.com/cmd.jpg" alt="cmd执行结果"><br>执行完后打开cmd,查看jdk版本是否成功。</p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>脚本附件点击这里：<img src="http://pan.baidu.com/s/1nvtxyop" alt="脚本附件"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h2 id=&quot;intro&quot;&gt;前言&lt;/h2&gt;我们平时在window上做开发的时候，可能需要同时开发两个甚至多个项目，有时不同的项目对JDK的版本要求有区别，这时候我们可能会在一台电脑上安装多个版本的JDK。可环境变量又需要进行修改切换JDK版本，所以在网上找了找可以通过批处理脚本进行环境变量的自由切换。&lt;br&gt;
    
    </summary>
    
      <category term="脚本工具" scheme="http://www.shigZhao.me/categories/%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="bat脚本" scheme="http://www.shigZhao.me/tags/bat%E8%84%9A%E6%9C%AC/"/>
    
      <category term="jdk切换" scheme="http://www.shigZhao.me/tags/jdk%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
</feed>
